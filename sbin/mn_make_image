#!/bin/bash

THISPATH=`realpath -- $0`
THISPATH=`dirname -- $THISPATH`

BASEDIR="${THISPATH}/.."
. "$BASEDIR/lib/mn_includes"

# initial size of /local partition in bytes, will be expanded after deployment!
LOCAL_BASE_SIZE=134217728

FIRSTRUN="firstrun.sh"
CONF_TIMEZONE="Europe/Berlin"
CONF_XKBMODEL="pc105"
CONF_XKBLAYOUT="de"
CONF_XKBVARIANT=""
CONF_XKBOPTIONS=""

# You cannot change the following:
CMDLINE=cmdline.txt
MOUNTPOINT=/mnt

needroot

function usage {
	cat << EOF
$PROGNAME creates a [mn] medianet base image from a RaspiOS release.
Usage: $PROGNAME [options...]

--help         displays this message
 -h

--output-path  an output path where the downloaded RaspiOS image and
 -o            the medianet base image will be stored - make sure you have
               enough space for the final image plus an intermediate copy,
               i.e. more than 2x [size] below

--image        a HTTP URL to download or a locally stored image to start
 -i            from; defaults to the latest known-good image, currently
               $RASPIOS_BASE_IMAGE

--size         the size of the base image in bytes; needs to be big
 -s            enough to contain the original (unzipped) image plus an extra
               local partition. Making it bigger will give you a bigger root
               fs - the local partition is expanded to the size of the medium
               anyways. Leave alone unless you know what you're doing. 
               Default is $IMAGE_SIZE.
EOF
	exit
}

# first param: the image
# second param: the partition number counting from 1
# prints: the size of the partition in bytes
function end_of_partition {
	echo $( \
		parted "$1" unit B print \
		| grep -Eo '\s*'$2'\s+[0-9]+B\s+[0-9]+B\s+[0-9]+B\s+.*' \
		| sed -E 's/\s*'$2'\s+[0-9]+B\s+([0-9]+)B\s+[0-9]+B\s+.*/\1/' \
	)
}

# first param: a disk position in bytes
# prints: the size of the next highest aligned position
function align_to_4MiB {
	FOUR_MIB=$(( 4 * 2 ** 20 ))
	echo $(( $1 + (FOUR_MIB - ($1 % FOUR_MIB)) ))
}

# first param: a size in bytes
# prints: the same size in Gibibytes
function bytes_to_GiB {
	cGiB=$(( ($1 * 100 / (2 ** 30) ) % 100 ))
	GiB=$(( $1 / (2 ** 30) ))
	echo "${GiB}.${cGiB}" 
}

function create_script {
	cat << EOF
#!/bin/bash

# This code has been extracted from rpi-imager 2022-06-20.

set +e

# rename default user and set password:
FIRSTPASS='$(mkpasswd -m yescrypt --stdin <<< $CONF_USER)'
/usr/lib/userconf-pi/userconf "$CONF_USER" "\$FIRSTPASS"

# set default timezone:
rm -f /etc/localtime
echo "${CONF_TIMEZONE}" >/etc/timezone
dpkg-reconfigure -f noninteractive tzdata

# set default keyboard map:
cat << KBEOF > /etc/default/keyboard
XKBMODEL="$CONF_XKBMODEL"
XKBLAYOUT="$CONF_XKBLAYOUT"
XKBVARIANT="$CONF_XKBVARIANT"
XKBOPTIONS="$CONF_XKBOPTIONS"
KBEOF
dpkg-reconfigure -f noninteractive keyboard-configuration

# enable secure shell server:
systemctl enable ssh

# remove kernel command line modification, keep backup:
cp /boot/$CMDLINE /boot/$CMDLINE.done
sed -i 's| systemd.run.*||g' "/boot/$CMDLINE"
# clean up after this script:
mv "/boot/$FIRSTRUN" "/boot/$FIRSTRUN.done"
exit 0
EOF

}


OUTPUT_PATH="$PWD"
IMAGE="$RASPIOS_BASE_IMAGE"
IMAGE_SIZE="$RASPIOS_BASE_IMAGE_SIZE"
while [[ -n "$1" ]] ; do
	case $1 in
		-h|--help)
			usage
			;;
		-o|--output-path)
			shift
			if [[ -d "$1" ]] ; then
				OUTPUT_PATH="$1"
			else
				bail "Output path does not exist."
			fi
			;;
		-i|--image)
			shift
			if [[ "$1" =~ ^http || -f "$1" ]] ; then
				IMAGE="$1"
			else
				bail "Image must either be a URL starting with 'http[s]' or a local file."
			fi
			;;
		-s|--size)
			shift
			if [[ "$1" =~ [0-9]+ ]] ; then
				IMAGE_SIZE="$1"
			else
				bail "Size must be a number!"
			fi
			;;
		*)
			bail "Unknown option '$1'."
			;;
	esac
	shift
done

scream "Creating a [mn] medianet base image:"

IMAGE_BASENAME=`basename "$IMAGE"`
WGET_OUT="--output-document=${OUTPUT_PATH}/${IMAGE_BASENAME}"
if [[ "$IMAGE" =~ ^https?://  ]] ; then
	echo "Downloading image from $IMAGE..."
	wget -q --show-progress "$WGET_OUT" "$IMAGE" | tr '\n' ' ' && success || bail
	if [[ "$IMAGE" == "$RASPIOS_BASE_IMAGE" ]] ; then
		# use locally stored checksum for default production image
		CHECKSUM="$RASPIOS_BASE_IMAGE_SHA256"
	else
		echo "Downloading checksum from $IMAGE.sha256 ..."
		CHECKSUM=`wget -q --output-document - "$IMAGE.sha256"`
	fi
	echo -n "Verifying checksum..."
	COMPUTED_CHECKSUM=`sha256sum "${OUTPUT_PATH}/${IMAGE_BASENAME}" | cut -f 1 -d ' '`
	if [[ "$CHECKSUM" =~ ^${COMPUTED_CHECKSUM} ]] ; then
		success
		IMAGE="${OUTPUT_PATH}/${IMAGE_BASENAME}"
	else
		bail "Checksum verification failed. Should be ${CHECKSUM}, is ${COMPUTED_CHECKSUM}."
	fi
elif [[ "$IMAGE" =~ [a-z]+:// ]] ; then
	bail "Protocol not implemented. Use http, https, or local file for now. Patches welcome."
else
	echo "Using local image ${IMAGE}..."
fi

if [[ "$IMAGE" =~ \.zip$ ]] ; then
	echo -n "Unzipping ${IMAGE} to ${OUTPUT_PATH}..."
	EXTRACTED_IMAGE=`echo "${OUTPUT_PATH}/${IMAGE_BASENAME}" | sed 's/\.zip$/\.img/'`
	unzip -q -d "${OUTPUT_PATH}" "${IMAGE}" && success || bail
elif [[ "$IMAGE" =~ \.xz$ ]] ; then
	echo -n "Decompressing ${IMAGE} to ${OUTPUT_PATH}..."
	EXTRACTED_IMAGE=`echo "${OUTPUT_PATH}/${IMAGE_BASENAME}" | sed 's/\.xz$//'`
	xz --decompress --keep --no-sparse --stdout "$IMAGE" > "$EXTRACTED_IMAGE" && success || bail
elif [[ "$IMAGE" =~ \.img$ ]] ; then
	EXTRACTED_IMAGE="${OUTPUT_PATH}/${IMAGE_BASENAME}"
	if [[ "$IMAGE" != "$EXTRACTED_IMAGE" ]] ; then
		echo -n "Copying ${IMAGE} to ${OUTPUT_PATH}..."
		cp "$IMAGE" "$OUTPUT_PATH" && success || bail
	fi
else
	bail "Expecting either a .zip, .xz,  or .img file to work on."
fi



echo -n "Padding image to ${IMAGE_SIZE} bytes ($( bytes_to_GiB ${IMAGE_SIZE} ) GiB)..."
truncate -s $IMAGE_SIZE "$EXTRACTED_IMAGE" && success || bail

echo -n "Checking end of /boot partition... "
END_OF_BOOT=$( end_of_partition "$EXTRACTED_IMAGE" 1 )
echo "at ${END_OF_BOOT} bytes ($( bytes_to_GiB ${END_OF_BOOT} ) GiB)."

END_OF_ROOT=$(( IMAGE_SIZE - LOCAL_BASE_SIZE - (END_OF_BOOT * 2) ))
END_OF_ROOT=$(( $( align_to_4MiB "$END_OF_ROOT" ) - 1 ))
echo -n "Resizing the rootfs partition to end at ${END_OF_ROOT} bytes ($( bytes_to_GiB ${END_OF_ROOT} ) GiB)..."
parted $EXTRACTED_IMAGE resizepart 2 ${END_OF_ROOT}B && success || bail

echo -n "Checking end of /root partition... "
END_OF_ROOT=$( end_of_partition "$EXTRACTED_IMAGE" 2 )
echo "at ${END_OF_ROOT} bytes ($( bytes_to_GiB ${END_OF_ROOT} ) GiB)."

START_OF_LOCAL=$( align_to_4MiB "$END_OF_ROOT" )
echo -n "Creating a localfs partition at $START_OF_LOCAL bytes, spanning the remainder of the disk..."
parted $EXTRACTED_IMAGE mkpart primary ext4 $(( START_OF_LOCAL ))B 100% && success || bail

echo -n "Creating loop devices for the image..."
PARTITIONS=`kpartx -av "$EXTRACTED_IMAGE"`
test "$?" && success || failure
declare -a PART
PART[1]=/dev/mapper/`echo $PARTITIONS | grep -o loop.p1`
PART[2]=/dev/mapper/`echo $PARTITIONS | grep -o loop.p2`
PART[3]=/dev/mapper/`echo $PARTITIONS | grep -o loop.p3`

for i in 1 2 3 ; do
	while : ; do
		echo -n "Waiting for ${PART[$i]}..."
		test -e "${PART[$i]}" && break
		sleep 1
	done
	success
done | indent

echo -n "Mounting the boot partition to ${MOUNTPOINT}..."
mount "${PART[1]}" "$MOUNTPOINT" && success || bail

echo -n "Create $FIRSTRUN to set user medianet pass medianet, set default tz DE and keyboard DE, and activate SSH login..."
create_script > "${MOUNTPOINT}/${FIRSTRUN}" && success || bail

echo -n "Make $FIRSTRUN executable..."
chmod +x "/${MOUNTPOINT}/${FIRSTRUN}" && success || bail

echo -n "Run $FIRSTRUN on first boot..."
# Add at end, will be deleted by $FIRSTRUN:
sed -i "s|$| systemd.run=/boot/${FIRSTRUN} \
 systemd.run_success_action=reboot \
 systemd.unit=kernel-command-line.target|" \
	"/${MOUNTPOINT}/${CMDLINE}" && success || bail

echo -n "Disabling automatic resizing of root partition..."
sed -i 's/init=[^[:space:]]*//' "/${MOUNTPOINT}/${CMDLINE}" && success || bail

echo -n "Fixing root fs entry in kernel cmdline..."
sed -i 's/root=PARTUUID=[^[:space:]]*/root=\/dev\/mmcblk0p2/' "/${MOUNTPOINT}/${CMDLINE}"  && success || bail

echo -n "Unmounting boot partition..."
umount /mnt && success || bail

echo "Creating new ext4 file system on $PART3..."
mkfs.ext4 -L localfs "${PART[3]}"  | indent && success || bail

echo "Removing loop devices..."
# as of 2020-08, current versions of kpartx sometimes fail to clean up completely.
# see https://www.linuxquestions.org/questions/suse-opensuse-60/kpartx-not-removing-loop-devices-while-deleting-an-image-in-suse-linux-12-4-and-greater-version-4175671611/
# don't bail on unclean return code:
kpartx -d "$EXTRACTED_IMAGE" && success || failure
FINAL_IMAGE=$(echo "$EXTRACTED_IMAGE" | sed -e 's/raspios/medianet-base/' -e 's/-lite//g')
echo -n "Renaming image to $FINAL_IMAGE..."
mv "$EXTRACTED_IMAGE" "$FINAL_IMAGE" && success || bail
