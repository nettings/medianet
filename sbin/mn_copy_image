#!/bin/bash

. /medianet/lib/mn_includes

needroot

function usage {
	cat << EOF
Usage: $PROGNAME [options]
Copies a deployment-ready [mn] medianet image from the running system to
a remote host for duplication, using SSH.Make sure the system is running in read-only mode with all unnecessary
services disabled. 'mn_make_readonly' is your friend.

--help       display this help
 -h

--user       the user on the remote host
 -u

--host       the remote host or IP
 -H

--target-dir the target directory on the remote host; it must exist and
 -t          be writable by this user

--ignore-rw  proceed even though the local root fs is currently writable
 -i

EOF
	exit 2
}

DEVICE="/dev/mmcblk0"
BLOCKSIZE=$((512 * 1024))
NBLOCKS=16384

USER=""
HOST=""
TARGET=""
IGNORE_RW=

while [[ -n "$1" ]] ; do
	case "$1" in
		-h|--help)
			usage
			;;
		-u|--user)
			shift
			USER="$1"
			;;
		-H|--host)
			shift
			HOST="$1"
			;;
		-t|--target-dir)
			shift
			TARGET="$1"
			;;
		-i|--ignore-rw)
			IGNORE_RW=true
	esac
	shift
done

if [[ -z "$USER" || -z "$HOST" || -z "$TARGET" ]] ; then
	failure "You must specify user, host, and target."
	usage
fi

. /etc/os-release
ARCH=$(uname -m)
PLATFORM=$(get_platform)
IMAGE=`$DATE -Idate`"-medianet-$ARCH-$PLATFORM.img"

scream "Copying image from running system to ${USER}@${HOST}:${TARGET}/${IMAGE}."

echo -n "Checking if boot partition is mounted read-only..."
BOOT_IS_RW=`"$MOUNT" | "$GREP" "^${DEVICE}p1.*[(,]rw[),]"`
if [[ -n "$BOOT_IS_RW" ]] ; then
	if [[ -n $IGNORE_RW ]] ; then
		failure " no. Ignoring at your own risk."
	else
		bail " no - aborting."
	fi
else
	success
fi

echo -n "Checking if root partition is mounted read-only..."
ROOT_IS_RW=`"$MOUNT" | "$GREP" "^${DEVICE}p2.*[(,]rw[),]"`
if [[ -n "$ROOT_IS_RW" ]] ; then
	if [[ -n $IGNORE_RW ]] ; then
		failure " no. Ignoring at your own risk."
	else
		bail " no - aborting."
	fi
else
	success
fi

echo -n "Determining used space (= end of third partition) on ${DEVICE}..."
PTABLE="`"$PARTED" -m "$DEVICE" unit B print`"
END_OF_P3=`echo "$PTABLE" | "$GREP" "^3:" | "$SED" -s 's/^3:[0-9]\+B:\([0-9]\+\)B:.*/\1/'`
NBLOCKS=$((${END_OF_P3} / ${BLOCKSIZE} + 1))
echo " $END_OF_P3 bytes (${NBLOCKS} blocks of ${BLOCKSIZE} bytes)"

echo "Transferring data to ${USER}@${HOST}:${TARGET}/${IMAGE}..."
"$DD" if="$DEVICE" bs="$BLOCKSIZE" count="$NBLOCKS" status=progress \
	| "$SSH" "$USER"@"$HOST" "cat > \"${TARGET}/${IMAGE}\"" \
	&& success || failure
