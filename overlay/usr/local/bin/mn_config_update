#!/bin/bash

. /medianet/lib/mn_includes

needroot

if [[ -n "$1" ]] ; then
	CONFIG_FILE="$1"
else
	CONFIG_FILE="$SYSTEM_CONFIG"
fi

if [[ ! -e "$CONFIG_FILE" ]] ; then
	bail "$CONFIG_FILE does not exist."
fi

NOEDIT="# automatically created by $PROGNAME from $CONFIG_FILE, do not edit!"
NONE="[none]\n"

# globals
MATCH="product description hostname location version"
# make nice headline:
FMATCH=
for i in $MATCH ; do FMATCH+="$i/" ; done
# shave off last character:
FMATCH=${FMATCH%?} 
scream "Update $FMATCH:"
# make jq query
FMATCH=
for i in $MATCH ; do FMATCH+=".$i," ; done
FMATCH=${FMATCH%?}
DATA=`cat "$CONFIG_FILE" | "$JQ" -r "$FMATCH"`
# make shell variable suffix:
FMATCH=
for i in $MATCH ; do FMATCH+="`echo $i | "$TR" [a-z] [A-Z]` " ; done
CONFIG=
for i in $FMATCH; do
	VAR="CONFIG_$i"
	read VALUE
	if [[ "$VALUE" = "null" ]] ; then
		CONFIG+="$VAR=\"\"\n"
		failure "$VAR undefined."
	else
		CONFIG+="$VAR=\"$VALUE\"\n"
	fi
done <<< "$DATA"

echo -en "${CONFIG:-${NONE}}" | indent
CONFIG="$NOEDIT\n$CONFIG"
echo -n "Writing $CONFIG_INCLUDE..."
echo -e "$CONFIG" > "$CONFIG_INCLUDE" && success || failure

. $CONFIG_INCLUDE

# hostname
if [[ $CONFIG_HOSTNAME =~ [a-zA-Z0-9][a-zA-Z0-9-]{0,62} ]] ; then
	echo -n "Updating /etc/hostname to $CONFIG_HOSTNAME..."
	if [[ `cat /etc/hostname 2> /dev/null | "$TR" -d '[:space:]'` != "$CONFIG_HOSTNAME" ]] ; then 
		echo "$CONFIG_HOSTNAME" > /etc/hostname && success || failure
	else
		echo " not changed".
	fi
	echo -n "Updating /etc/hosts to $CONFIG_HOSTNAME..."
	if [[ -n `grep $HOSTNAME /etc/hosts` ]] ; then
		"$SED" -i "s/$HOSTNAME/$CONFIG_HOSTNAME/g" /etc/hosts && success || failure
	else
		echo -e "127.0.0.1\t$CONFIG_HOSTNAME" >> /etc/hosts && success || failure
	fi
	echo -n "Setting hostname to $CONFIG_HOSTNAME..."
	"$HOSTNAMEBIN" "$CONFIG_HOSTNAME" && success || failure
else
	echo -n "CONFIG_HOSTNAME is not a valid hostname..." ; failure
fi

scream "Update boot configuration in $CONF_FILE_BOOT:"
CONFIG=
# we assume anything that is not a dtparam, dtoverlay or gpio can occur only once
# this becomes important if we later combine default settings with overrides
DATA=`cat "$CONFIG_FILE"  | "$JQ" -r '.bootConfig | del(.dtoverlay) | del(.dtparam) | del(.gpio) | keys_unsorted[] as $k | "\($k)\n\(.[$k])"'`
while read KEY ; do
	read VALUE
	if [[ -z "$KEY" || -z "$VALUE" ]] ; then continue; fi
	CONFIG+="$KEY=$VALUE\n"
done <<< "$DATA"
# the following boot parameters can occur multiple times. we preserve the original order and rely
# on the config.txt parser to do the right thing (latest takes precedence)
DATA=`cat "$CONFIG_FILE"  | "$JQ" -r '.bootConfig.gpio[]?'`
while read VALUE ; do
	[[ $VALUE ]] && CONFIG+="gpio=$VALUE\n"
done <<< "$DATA"
DATA=`cat "$CONFIG_FILE"  | "$JQ" -r '.bootConfig.dtparam[]?'`
while read VALUE ; do
	[[ $VALUE ]] && CONFIG+="dtparam=$VALUE\n"
done <<< "$DATA"
DATA=`cat "$CONFIG_FILE"  | "$JQ" -r '.bootConfig.dtoverlay[]?'`
while read VALUE ; do
	[[ $VALUE ]] && CONFIG+="dtoverlay=$VALUE\n"
done <<< "$DATA"
echo -en "${CONFIG:-${NONE}}" | indent
CONFIG="$NOEDIT\n$CONFIG"
echo -n "Writing $CONF_FILE_BOOT..."
echo -en "$CONFIG" > "$CONF_FILE_BOOT" && success || failure


# mounts
CONFIG=
DATA=`cat "$CONFIG_FILE" | "$JQ" -r '.mounts[]'`
scream "Write $CONF_FILE_FSTAB and check for custom mounts:"
# always read default fstab
while read LINE ; do
	CONFIG+="$LINE\n"
done < "$CONF_FILE_FSTAB_DEFAULT"
if [[ -n "$DATA" ]] ; then
	while read LINE ; do
		CONFIG+="$LINE\n"
	done <<< "$DATA"
	echo -en "${CONFIG:-${NONE}}" | indent
fi
CONFIG="$NOEDIT\n$CONFIG"
echo -n "Writing $CONF_FILE_FSTAB..."
echo -en "$CONFIG" > "$CONF_FILE_FSTAB" && success || failure


# systemd unit status
DATA=`cat "$CONFIG_FILE" | "$JQ" -r '.systemdUnits[]? | select(.enabled == 1) | "\(.unit).\(.type)"'`
if [[ -n "$DATA" ]] ; then
	scream "Update systemd unit status and firewall rules"
	# we iterate over known list of services, so we can disable anything not enabled in the config file
	for i in $SYSTEMD_MEDIANET_UNITS ; do
		UNIT=`"$BASENAME" "$i"`
		# greedy match gets rid of last ".foo":
		UFWAPP=`echo $UNIT | "$SED" 's/\(.*\)\..*/\1/'`
		"$GREP" --quiet "^${UNIT}$" <<< "$DATA" && {
			# service should be enabled
			echo -n "Enabling $UNIT..."
			"$SYSTEMCTL" --quiet is-enabled "$UNIT" 2> /dev/null && {
				echo " is already enabled."
			} || {
				"$SYSTEMCTL" --quiet enable "$i" && success || failure
			}
			if [[ -e "${CONF_DIR_UFW_MNAPPS}/${UFWAPP}" ]] ; then
				echo -n "Found matching firewall service '$UFWAPP'. Enabling..."
				"$UFW" allow "$UFWAPP" && success || failure
			fi
		} || {
			# service should be disabled
			echo -n "Disabling $UNIT..."
			"$SYSTEMCTL" --quiet is-enabled "$UNIT" 2> /dev/null && {
				"$SYSTEMCTL" --quiet disable "$UNIT" && success || failure
			} || echo " already disabled."
			if [[ -e "${CONF_DIR_UFW_MNAPPS}/${UFWAPP}" ]] ; then
				echo -n "Found matching firewall service '$UFWAPP'. Disabling..."
				"$UFW" delete allow "$UFWAPP" && success || failure
			fi
		}
	done
fi

# systemd unit options
DATA=`cat "$CONFIG_FILE" | "$JQ" -r '.systemdUnits[]? | select(.enabled == 1) | select(.jackName or .execStartPre or .options) | "\(.unit)\n\(.type)\n\(.jackName)\n\(.execStartPre)\n\(.options)"'`
if [[ -n "$DATA" ]] ; then
	scream "Update systemd unit options:"
	while read UNIT ; do
		CONFIG=
		read TYPE
		if [[ -z "$UNIT" || -z "$TYPE" ]] ; then continue ; fi 
		DROPIN_DIR="$SYSTEMD_UNIT_DIR"/"$UNIT"."$TYPE".d
		DROPIN_FILE="$UNIT"."$TYPE".conf
		if [[ ! -e "$DROPIN_DIR" ]] ; then
			echo -n "Creating $DROPIN_DIR..."
			mkdir "$DROPIN_DIR" && success || failure
		fi
		read JACKNAME
		if [[ "$JACKNAME" != "null" ]] ; then
			CONFIG+="Environment=\"JACKNAME=$JACKNAME\"\n"
		fi
		read EXECSTARTPRE
		if [[ "$EXECSTARTPRE" != "null" ]] ; then
			CONFIG+="ExecStartPre=$EXECSTARTPRE\n"
		fi
		read OPTIONS
		if [[ "$OPTIONS" != "null" ]] ; then
			CONFIG+="Environment=\"OPTIONS="
			# deprecated hack to substitute %jackName% in the options string
			# now hardcoded into service file for all services that support it
			CONFIG+=`echo "$OPTIONS" | sed "s/%jackName%/\'$JACKNAME\'/g"`
			CONFIG+="\"\n"
		fi
		echo "$UNIT options:"
		echo -en "${CONFIG:-${NONE}}" | indent
		CONFIG="$NOEDIT\n\n\n[Service]\n\n$CONFIG"
		echo -n "Writing to $DROPIN_DIR/$DROPIN_FILE ..."
		echo -e "$CONFIG" > "$DROPIN_DIR"/"$DROPIN_FILE" && success || failure
	done <<< "$DATA"
fi
	
# systemd jack unit connections
DATA=`cat "$CONFIG_FILE" | "$JQ" -r '.systemdUnits[]? | select(.outPorts or .inPorts) | "\(.unit)\n\(.type)"'`
if [[ -n "$DATA" ]] ; then
	scream "Update systemd jack unit connections:"
	while read UNIT ; do
		CONFIG=
	        read TYPE
		if [[ -z "$UNIT" || -z "$TYPE" ]] ; then continue ; fi 
	        DROPIN_DIR="$SYSTEMD_UNIT_DIR"/"$UNIT"."$TYPE".d
	        DROPIN_FILE="$UNIT"."$TYPE".connections
		if [[ ! -e "$DROPIN_DIR" ]] ; then
			echo -n "Creating $DROPIN_DIR..."
			mkdir "$DROPIN_DIR" && success || failure
		fi
		COUT=`cat "$CONFIG_FILE" | "$JQ" --arg unit "$UNIT" -rjf "$PREFIX"/overlay/usr/local/lib/mn_config/output_connections.jq`
		if [[ "$COUT" ]] ; then
			CONFIG="CONNECTIONS_OUT=\"$COUT\n\"\n"
		fi
		CIN=`cat "$CONFIG_FILE" | "$JQ" --arg unit "$UNIT" -rjf "$PREFIX"/overlay/usr/local/lib/mn_config/input_connections.jq`
		if [[ "$CIN" ]] ; then
			CONFIG+="CONNECTIONS_IN=\"$CIN\n\"\n"
		fi
		echo "$UNIT connections:"
		echo -en "${CONFIG:-${NONE}}" | indent
		CONFIG="$NOEDIT\n\n$CONFIG"
		echo -n "Writing to $DROPIN_DIR/$DROPIN_FILE ..."
		echo -e "$CONFIG" > "$DROPIN_DIR"/"$DROPIN_FILE" && success || failure
	done <<< "$DATA"
fi

scream "Update systemd daemon settings:"
echo -n "Performing 'systemctl daemon-reload'..."
$SYSTEMCTL daemon-reload && success || failure

# write config files

# mod-host
CONFIG=
DATA=`cat "$CONFIG_FILE" | "$JQ" -r '.systemdUnits[]? | select(.unit == "mod-host") | .config[]?'`
if [[ -n "$DATA" ]] ; then
	scream "Update mod-host configuration:"
	while read COMMAND ; do
		CONFIG+="$COMMAND\n"
	done <<< "$DATA"
	echo -en "${CONFIG:-${NONE}}" | indent
	CONFIG="$NOEDIT\n\n$CONFIG"
	echo -n "Writing to $CONF_FILE_MODHOST..."
	echo -e "$CONFIG" > "$CONF_FILE_MODHOST" && success || failure
fi

# shairport-sync
CONFIG=
DATA=`cat "$CONFIG_FILE" | "$JQ" -r '.systemdUnits[]? | select(.unit == "shairport-sync") | .config[]?'`
if [[ -n "$DATA" ]] ; then
	scream "Update shairport-sync configuration:"
	while read COMMAND ; do
		CONFIG+="$COMMAND\n"
	done <<< "$DATA"
	echo -en "${CONFIG:-${NONE}}" | indent
	CONFIG="$NOEDIT\n\n$CONFIG"
	echo -n "Writing to $CONF_FILE_SHAIRPORT_SYNC..."
	echo -e "$CONFIG" > "$CONF_FILE_SHAIRPORT_SYNC" && success || failure
fi

# zita-lrx
CONFIG=
DATA=`cat "$CONFIG_FILE" | "$JQ" -r '.systemdUnits[]? | select(.unit == "zita-lrx") | .config[]?'`
if [[ -n "$DATA" ]] ; then
	scream "Update zita-lrx configuration:"
	while read COMMAND ; do
		CONFIG+="$COMMAND\n"
	done <<< "$DATA"
	echo -en "${CONFIG:-${NONE}}" | indent
	CONFIG="$NOEDIT\n\n$CONFIG"
	echo -n "Writing to $CONF_FILE_ZITALRX..."
	echo -e "$CONFIG" > "$CONF_FILE_ZITALRX" && success || failure
fi
