#!/bin/bash

. /medianet/lib/mn_includes

needroot

if [[ -n "$1" ]] ; then
	CONFIG_FILE="$1"
else
	CONFIG_FILE="$SYSTEM_CONFIG"
fi

if [[ ! -e "$CONFIG_FILE" ]] ; then
	bail "$CONFIG_FILE does not exist."
fi

scream "Update product/description/hostname/location/version"
CONFIG=
DATA=`cat "$CONFIG_FILE" | jq -r 'to_entries[]|select(.key == ("product","description","hostname","location","version"))|.value'`
while read VALUE; do
	CONFIG+="CONFIG_PRODUCT=\"$VALUE\"\n"
	read VALUE
	CONFIG+="CONFIG_DESCRIPTION=\"$VALUE\"\n"
	read VALUE
	echo -n "Updating /etc/hostname to $VALUE..."
	CONFIG+="CONFIG_HOSTNAME=\"$VALUE\"\n"
	if [[ `cat /etc/hostname | tr -d '[:space:]'` != "$VALUE" ]] ; then 
		echo "$VALUE" > /etc/hostname && success || failure
	else
		echo " not changed".
	fi
	read VALUE
	CONFIG+="CONFIG_LOCATION=\"$VALUE\"\n"
	read VALUE
	CONFIG+="CONFIG_VERSION=\"$VALUE\"\n"
	break
done <<< "$DATA"
scream "Setting CONFIG_ variables:"
echo -en "$CONFIG"
CONFIG="# Values created by $PROGNAME from $CONFIG_FILE, do not edit!\n$CONFIG"
echo -n "Updating $CONFIG_INCLUDE..."
echo -e "$CONFIG" > "$CONFIG_INCLUDE" && success || failure

scream "Update boot configuration in $BOOT_LOCAL:"
CONFIG=
# we assume anything that is not a dtparam or a dtoverlay can occur only once
# this becomes important if we later combine default settings with overrides
CONFIG="# singleton parameters\n"
DATA=`cat "$CONFIG_FILE"  | jq -r '.bootConfig | del(.dtoverlay) | del(.dtparam) | keys_unsorted[] as $k | "\($k)\n\(.[$k])"'`
while read KEY ; do
	read VALUE
	CONFIG+="$KEY=$VALUE\n"
done <<< "$DATA"
# dtoverlay can occur multiple times. we preserve the original order and rely
# on the config.txt parser to do the right thing (latest takes precedence)
CONFIG+="# dtoverlay parameters\n"
DATA=`cat "$CONFIG_FILE"  | jq -r '.bootConfig.dtoverlay[]'`
while read VALUE ; do
	CONFIG+="dtoverlay=$VALUE\n"
done <<< "$DATA"
# same for dtparam
CONFIG+="# dtparam parameters\n"
DATA=`cat "$CONFIG_FILE"  | jq -r '.bootConfig.dtparam|keys_unsorted[] as $k | "\($k)\n\(.[$k])"'`
while read KEY ; do
	read VALUE
	CONFIG+="dtparam=$KEY=$VALUE\n"
done <<< "$DATA"
echo -en "$CONFIG"
echo -n "writing out to $BOOT_LOCAL..."
echo -en "$CONFIG" > "$BOOT_LOCAL" && success || failure


scream "Update systemd unit status:"
DATA=`cat "$CONFIG_FILE"  | jq -r '.systemdUnits[]|select(.enabled == 0)|.unit'`
while read SERVICE ; do
	"$SYSTEMCTL" --quiet is-enabled "$SERVICE" 2> /dev/null && {
		echo -n "Disabling $SERVICE..."
		"$SYSTEMCTL" disable "$SERVICE" && success || failure
	} || echo "$SERVICE already disabled."
done <<< "$DATA"
DATA=`cat "$CONFIG_FILE"  | jq -r '.systemdUnits[]|select(.enabled == 1)|.unit'`
while read SERVICE ; do
	"$SYSTEMCTL" --quiet is-enabled  "$SERVICE" && {
		echo "$SERVICE is already enabled."
	} || {
		echo -e "Enabling $SERVICE..."
		"$SYSTEMCTL" --quiet enable "$SYSTEMD_UNITS_LOCAL"/"$SERVICE" && success || failure
	}
done <<< "$DATA"


scream "Update systemd unit parameters:"
DATA=`cat "$CONFIG_FILE" | jq -r '.systemdUnits[]|select(.options)|"\(.unit)\n\(.options)"'`
while read UNIT ; do
	if [[ ! -e "$SYSTEMD_UNIT_DIR"/"$UNIT".d ]] ; then
		echo -n "Creating $SYSTEMD_UNIT_DIR/$UNIT.d..."
		mkdir "$SYSTEMD_UNIT_DIR"/"$UNIT".d && success || failure
	fi
	read OPTIONS
	OPTIONS="OPTIONS=\"$OPTIONS\""
	echo -n "Writing $OPTIONS to $SYSTEMD_UNIT_DIR/$UNIT.d/$UNIT.env..."
	echo "$OPTIONS" > "$SYSTEMD_UNIT_DIR"/"$UNIT".d/"$UNIT".env && success || failure
done <<< "$DATA"
  