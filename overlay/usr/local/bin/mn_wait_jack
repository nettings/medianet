#!/bin/bash

. /medianet/lib/mn_includes

function help {
	cat << EOF

$PROGNAME blocks until a JACK port to match each of the search strings has
been found. You can use it to make sure a certain JACK port is available
before performing other tasks.

Usage: $PROGNAME [-t seconds] [jack port search string[ ...]]

	--help		This help
	 -h

	--interval n	The interval between re-tests in seconds. The default
	 -i		is $INTERVAL.

	--timeout n	A timeout in seconds. If it expires, terminate
	 -t		with return value $ERR_TIMEOUT. Default is no timeout.

	--verbose	Write messages to stdout.
	 -v

EOF
exit 0
}


declare -a SEARCH
NSEARCH=0
INTERVAL=5
TIMEOUT=-1
VERBOSE=0

while [[ -n "$1" ]] ; do
	case $1 in 
	-h|--help)
		help
		;;
	-i|--interval)
		if [[ "$2" =~ [0-9]+ ]] ; then
			shift
			INTERVAL="$1"
		else
			bail "--interval requires a numerical argument (time to next test in seconds)"
		fi
		;;
	-t|--timeout)
		if [[ "$2" =~ [0-9]+ ]] ; then
			shift 
			TIMEOUT="$1"
		else
			bail "--timeout requires a numerical argument (timeout in seconds)"
		fi
		;;		
	-v|--verbose)
		VERBOSE=1
		;;
	-*)
		bail "unknown option $1"
		;;
	*)
		# build search term array
		SEARCH[$NSEARCH]="$1"
		# echo "SEARCH[$NSEARCH]\t= ${SEARCH[$NSEARCH]}."
		((NSEARCH++))
		;;
	esac
	shift
done

# round timeout to nearest higher multiple of intervals:
(( TIMEOUT = (1 + TIMEOUT / INTERVAL) * INTERVAL))
while (( TIMEOUT != 0 )) ; do
	# echo "Round $((ROUND++)): TIMEOUT $TIMEOUT"
	JACKPORTS=`/usr/bin/jack_lsp 2> /dev/null`
	i=0
	while (( i < NSEARCH )) ; do
		# check each port in list
		MATCH=$("$GREP" --max-count 1 "${SEARCH[$i]}" <<< "$JACKPORTS")
		if [[ -n "$MATCH" ]]; then
			(( NSEARCH-- ))
			verbose "$MATCH matches ${SEARCH[$i]}, ${NSEARCH} items left" | indent
			# delete from list by replacing with last item
			SEARCH[$i]=${SEARCH[$NSEARCH]}
			# clear last item
			SEARCH[$NSEARCH]=
		else
			verbose "No match for ${SEARCH[$i]}." | indent
			(( i++ ))
		fi
	done
	if [[ "$NSEARCH" -eq 0 ]] ; then
		verbose "All ports found."
		exit 0
	fi
	"$SLEEP" "$INTERVAL"
	(( TIMEOUT -= INTERVAL ))
done

MSG="Timeout expired while waiting for"
for (( i=0 ; i < $NSEARCH ; i++ )) ; do
	MSG+=" '${SEARCH[$i]}'"
done
MSG+="."
error "$MSG"
exit "$ERR_TIMEOUT"
