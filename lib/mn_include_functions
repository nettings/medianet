ESC_RED="\033[0;31m"
ESC_GRN="\033[1;32m"
ESC_YLW="\033[1;33m"
ESC_BLU="\033[1;34m"
ESC_BLD="\033[1m"
ESC_CLR="\033[0m"

function scream {
  echo
  echo -e "\033[1;1m$@\033[0m"
}

function success {
  echo  -e " ${ESC_GRN}succeeded.${ESC_CLR}"
}

# $@: error message
function failure {
	if [[ -n "$@" ]] ; then
		ERRMSG="$@"
	else
		ERRMSG="failed."
	fi
	ERR=$?
	if [[ $ERR != 0 ]] ; then
		ERRMSG+=" (return code $ERR)"
	fi
	echo  -e " ${ESC_RED}${ERRMSG}${ESC_CLR}"
}

# $@: error message
function bail {
	if [[ -n "$@" ]] ; then
		ERRMSG="$@"
	else
		ERRMSG="failed critically."
	fi
	ERR=$?
	if [[ $ERR != 0 ]] ; then
		ERRMSG+=" (return code $ERR)"
	fi
	echo  -e " ${ESC_RED}${ESC_BLD}${ERRMSG}${ESC_CLR}"
	exit 1
}

# this function works as a filter ("|")!
# $1: indent string
function indent {
	sed -E "s/^(.*)/${1:-  }\1/"
}

function get_platform {
	if [[ -e "/proc/device-tree/model" ]] ; then
	        HW=`cat /proc/device-tree/model | "$TR" -d '\0'`
		if [[ "$HW" =~ ^Raspberry\ Pi\ Zero\ W\ Rev ]] ; then
			echo -n "PI0W"
	        elif [[ "$HW" =~ ^Raspberry\ Pi\ Model\ B ]] ; then
	                echo -n PI1B
	        elif [[ "$HW" =~ ^Raspberry\ Pi\ 2\ Model\ B ]] ; then
	                echo -n PI2B
	        elif [[ "$HW" =~ ^Raspberry\ Pi\ 3\ Model\ B\ Rev ]] ; then
	                echo -n PI3B
	        elif [[ "$HW" =~ ^Raspberry\ Pi\ 3\ Model\ B\ Plus ]] ; then
	                echo -n PI3BP
	        elif [[ "$HW" =~ ^Raspberry\ Pi\ 4\ Model\ B ]] ; then
	                echo -n PI4B
	        elif [[ "$HW" =~ ^Raspberry\ Pi\ 400\ Rev ]] ; then
			echo -n PI400
		else
			echo -n UNKNOWN
		fi
	fi
}

function needroot {
	if [ "$EUID" -ne 0 ] ; then
		echo -e "${ESC_RED}You must be root to run $PROGNAME.${ESC_CLR}"
		exit 2
	fi
}

function noroot {
	if [ "$EUID" -eq 0 ] ; then
		echo -e "${ESC_RED}For security reasons, you must not run $PROGNAME as root!${ESC_CLR}"
		exit 2
	fi
}
